(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{554:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h4",{attrs:{id:"正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("正则表达式是描述一类规则的字符语法，比如电话号，邮箱，位数限制\n")])])]),s("h5",{attrs:{id:"正则的基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则的基础"}},[t._v("#")]),t._v(" 正则的基础")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("/hi/ /hi/就是一个正则表达式，意思是查找字符串中的所有hi这个字符串\n正则表达式有两种匹配方式：匹配字符，匹配位置，要么匹配字符，要么匹配位置\n")])])]),s("h5",{attrs:{id:"模糊匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模糊匹配"}},[t._v("#")]),t._v(" 模糊匹配")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("两个方向上的模糊匹配")])]),t._v(" "),s("li",[s("p",[t._v("横向模糊匹配意思是，一个正则可匹配的字符串长度不是固定的实现方式就是使用量词{m, n}最少m次最多n次")])]),t._v(" "),s("li",[s("p",[t._v("例如\\d{2, 5}匹配一个数字类型，2到5次，意思就是匹配2位数到5位数")])])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" rex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\d{2,4}/g")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123,3222,12,,2,45555"')]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["123", "3222", "12", "4555"] 返回的是匹配项的一个数组 没有匹配到2，45555')]),t._v("\n")])])]),s("ul",[s("li",[s("p",[t._v("纵向模糊匹配意思是：一个正则匹配的字符串某一位字符的内容可以是多种，使用字符组实现")])]),t._v(" "),s("li",[s("p",[t._v("[abc]意思是匹配abc三个字符中的任意一个")])])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" rex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/a[123]b/g")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a2b,a3b,a1b,a12b,a23b"')]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["a2b", "a3b", "a1b"] 只能匹配字符组中的一个[123]')]),t._v("\n")])])]),s("h4",{attrs:{id:"范围标识法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#范围标识法"}},[t._v("#")]),t._v(" 范围标识法")]),t._v(" "),s("ul",[s("li",[t._v("字符组中的字符过多时，可以使用范围标识法 [1,2,3,4,5,6,7,8,9]=>[1-9]")]),t._v(" "),s("li",[t._v("使用-符号来连接和简写 当你要匹配(a-z)这三个字符的话，就要使用转义[a-z]或者使用* [-az]只要不要将-符号放在中间即可")])]),t._v(" "),s("h4",{attrs:{id:"排除表示法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排除表示法"}},[t._v("#")]),t._v(" 排除表示法")]),t._v(" "),s("ul",[s("li",[t._v("纵向模糊匹配，某个字符可以是任意一个字符，但是不能是字符组里面的字符")]),t._v(" "),s("li",[t._v("[^abc] ^在字符组内表示的就是求反，不是")])]),t._v(" "),s("h4",{attrs:{id:"常见的简写形式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的简写形式"}},[t._v("#")]),t._v(" 常见的简写形式")]),t._v(" "),s("ul",[s("li",[t._v("\\d 就是[0-9] diget数字英文")]),t._v(" "),s("li",[t._v("\\D 就是[^0-9]")]),t._v(" "),s("li",[t._v("\\w 就是[0-9a-zA-Z]")]),t._v(" "),s("li",[t._v("\\W 就是[^0-9a-zA-Z]")]),t._v(" "),s("li",[t._v("\\s 就是[\\t\\v\\n\\r\\f]标识空白符，空格，水平制表符，换页符，")]),t._v(" "),s("li",[t._v("\\S 就是[^\\s] 非空白符")]),t._v(" "),s("li",[t._v(". 就是通配符 几乎可以匹配任意字符")]),t._v(" "),s("li",[t._v("小技巧，想要匹配任意字符[\\s\\S]或者[^][\\d\\D]")])]),t._v(" "),s("h4",{attrs:{id:"量词-重复次数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#量词-重复次数"}},[t._v("#")]),t._v(" 量词 重复次数")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("表现形式{m,},第一位标识至少出现m次\n{m} =>{m,m}出现m次\n ?  => {0,1}出现或者不出现\n + => {1,}至少出现一次\n * =>  {0,}标识出现任意次，有可能不出现\n")])])]),s("h4",{attrs:{id:"贪婪匹配和惰性匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪匹配和惰性匹配"}},[t._v("#")]),t._v(" 贪婪匹配和惰性匹配")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("正则匹配默认是贪婪的\n")])])]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" rex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\d{2,5}/g")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12,234,3253,23543"')]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["12", "234", "3253", "23543"]它会一直匹配到5位数，尽可能多的匹配')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" rex2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\d{2,5}?/g")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["12", "23", "32", "53", "23", "54"]尽可能多的匹配，但是当满足两位数就可以了')]),t._v("\n")])])]),s("p",[t._v("量词后面?? 就是变成惰性匹配")]),t._v(" "),s("h4",{attrs:{id:"多选分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多选分支"}},[t._v("#")]),t._v(" 多选分支")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("(p1|p2|p3) 标识其中任意一个都可以\n")])])]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" rex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/hello|yellow/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello red yellow blue"')]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["hello", "yellow"]')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//分支匹配是惰性的，当第一个匹配到了，后面就不在匹配了")]),t._v("\n")])])]),s("h4",{attrs:{id:"位置匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位置匹配"}},[t._v("#")]),t._v(" 位置匹配")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("一个有6个位置元字符\n^ $ \\b \\B (?=p) (?!p)\n")])])]),s("h4",{attrs:{id:"和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#和"}},[t._v("#")]),t._v(" ^和$")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("    ^匹配开头，在多行匹配中匹配行开头\n    $匹配结尾，匹配多行匹配中行的结尾\n    比如我们把字符串开头和结尾使用其他符号替换\n")])])]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^|$/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n       console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" #world #\n")])])]),s("h4",{attrs:{id:"b和-b-单词边界"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b和-b-单词边界"}},[t._v("#")]),t._v(" \\b和\\B 单词边界")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[JS] Lesson_01.mp4"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\b/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "[#JS#] #Lesson_01#.#mp4#')]),t._v("\n")])])]),s("h4",{attrs:{id:"p-代表了p前面的位置-p-代表了除过-p-的位置剩余其他位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#p-代表了p前面的位置-p-代表了除过-p-的位置剩余其他位置"}},[t._v("#")]),t._v(" (?=p) 代表了p前面的位置 (?!p) 代表了除过(?=p)的位置剩余其他位置")]),t._v(" "),s("ul",[s("li",[t._v("括号的用法和作用\n分组功能和分支结构\n捕获分组\n反向引用\n非捕获分组\n举例:当你匹配ab两个字母时/(ab)+/分支结构(p1|p2)满足p1 p2都可以\n引用分组")])])])}),[],!1,null,null,null);a.default=e.exports}}]);