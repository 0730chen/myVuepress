(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{568:function(a,t,s){"use strict";s.r(t);var r=s(4),n=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h4",{attrs:{id:"java-的基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-的基本数据类型"}},[a._v("#")]),a._v(" Java 的基本数据类型")]),a._v(" "),s("ol",[s("li",[a._v("一共有 8 种数据类型，6 种数字类型，一种字符类型，一种布尔类型")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("byte 类型，是 8 位数据类型，范围为 2^7 次方之间,byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；")])]),a._v(" "),s("li",[s("p",[a._v("short 数据类型,是 16 位，有符号的整数类型，范围再 2^15 次方范围之内,short 数据类型，一个 short 变量是 int 变量所占空间的二分之一")])]),a._v(" "),s("li",[s("p",[a._v("Int 数据类型，int 数据类型是 32 位。他的一般默认值就是 int 类型")])]),a._v(" "),s("li",[s("p",[a._v("long 表示 64 位，这种类型主要使用在需要比较大整数的系统上")])])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10000L")]),a._v("\n")])])]),s("ul",[s("li",[a._v("float float 数据类型是单精度、32 位、符合 IEEE 754 标准的浮点数，不能表示精确的值")])]),a._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("float")]),a._v(" f1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("23.4f")]),a._v("\n")])])]),s("ul",[s("li",[a._v("double，精度为双精度，64 位，浮点数的默认类型为 double 类型；")])]),a._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" d1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("123.4")]),a._v("\n")])])]),s("ul",[s("li",[a._v("boolean,默认值是 false，只能取两个值")])]),a._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" b1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n")])])]),s("ul",[s("li",[a._v("char 字符类型，单一 16 位字符型")])]),a._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"xxx"')]),a._v("\n")])])]),s("h4",{attrs:{id:"访问控制修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问控制修饰符"}},[a._v("#")]),a._v(" 访问控制修饰符")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。")])]),a._v(" "),s("li",[s("p",[a._v("private 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）")])]),a._v(" "),s("li",[s("p",[a._v("public 对所有类可见。使用对象：类、接口、变量、方法")])]),a._v(" "),s("li",[s("p",[a._v("protected 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）")])])]),a._v(" "),s("h4",{attrs:{id:"for-循环和加强-for-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-循环和加强-for-循环"}},[a._v("#")]),a._v(" for 循环和加强 for 循环")]),a._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("55")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("54")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h4",{attrs:{id:"方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[a._v("#")]),a._v(" 方法")]),a._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/*修饰符，返回值，方法名,参数*/")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h4",{attrs:{id:"方法的重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法的重载"}},[a._v("#")]),a._v(" 方法的重载")]),a._v(" "),s("ul",[s("li",[a._v("名称相同，但是参数不同，返回值不同则方法可以重载")])]),a._v(" "),s("h4",{attrs:{id:"可变参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可变参数"}},[a._v("#")]),a._v(" 可变参数")]),a._v(" "),s("ul",[s("li",[a._v("以三个点定义可变参数方法")])]),a._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ccc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h4",{attrs:{id:"java-的数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-的数组"}},[a._v("#")]),a._v(" Java 的数组")]),a._v(" "),s("ul",[s("li",[a._v("声明类型 变量的值")]),a._v(" "),s("li",[a._v("数组的长度是固定的，一旦创建超出数组长度则会报错")]),a._v(" "),s("li",[a._v("数组动态创建")]),a._v(" "),s("li",[a._v("数组静态创建")]),a._v(" "),s("li",[a._v("无论是基本数据类型还是原始数据类型，都是存在堆中的")]),a._v(" "),s("li",[a._v("数组是相同数据类型的集合")])]),a._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//声明一个数组类型")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" num "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//可以声明但是不推荐")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//可以存放10个int 类型值")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5.6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//静态初始化")]),a._v("\n")])])]),s("h4",{attrs:{id:"多维数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多维数组"}},[a._v("#")]),a._v(" 多维数组")]),a._v(" "),s("ul",[s("li",[a._v("就是一个一维数组中的元素是一个数组")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" num "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n")])])]),s("h4",{attrs:{id:"稀疏数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#稀疏数组"}},[a._v("#")]),a._v(" 稀疏数组")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("将无用数据进行压缩")])]),a._v(" "),s("li",[s("p",[a._v("第一个数据表示数组几行几列有几个有效值")])]),a._v(" "),s("li",[s("p",[a._v("然后表示有效值中的坐标位置")])])]),a._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//代表一个6*6矩阵中只有两个有效值")]),a._v("\n\n")])])]),s("h4",{attrs:{id:"对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[a._v("#")]),a._v(" 对象")]),a._v(" "),s("ul",[s("li",[a._v("组织性的构建代码")]),a._v(" "),s("li",[a._v("封装，继承，多态")])]),a._v(" "),s("h4",{attrs:{id:"类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[a._v("#")]),a._v(" 类")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("类中只包含了属性和方法")])]),a._v(" "),s("li",[s("p",[a._v("static 方法和类初始化时一起实例化")])]),a._v(" "),s("li",[s("p",[a._v("值传递和引用传递（Java 中都是值传递）")])]),a._v(" "),s("li",[s("p",[a._v("基本数据类型都是值传递，对象类型都是引用传递")])]),a._v(" "),s("li",[s("p",[a._v("类的构造器（构造方法）")])])]),a._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'xxx'")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//和类名相同并且无返回值")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//有参构造器,用来初始化值")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" name\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("ul",[s("li",[s("p",[a._v("快捷键 alt+insert")])]),a._v(" "),s("li",[s("p",[a._v("除过 8 大基本类型都是引用类型")])])]),a._v(" "),s("h4",{attrs:{id:"封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[a._v("#")]),a._v(" 封装")]),a._v(" "),s("ul",[s("li",[a._v("高内聚，低耦合")]),a._v(" "),s("li",[a._v("pravite 关键字")]),a._v(" "),s("li",[a._v("隐藏变量，必须通过 set 和 get 去进行获取和设置")])]),a._v(" "),s("h4",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[a._v("#")]),a._v(" 继承")]),a._v(" "),s("ul",[s("li",[a._v("继承就是扩展类的属性")]),a._v(" "),s("li",[a._v("Java 都是单继承")]),a._v(" "),s("li",[a._v("子类继承了父类就会有父类全部的属性和方法")]),a._v(" "),s("li",[a._v("私有属性无法继承，只能通过 get/set 方法进行获取和赋值")]),a._v(" "),s("li",[a._v("所有的对象都继承 ObJect 类")])]),a._v(" "),s("h4",{attrs:{id:"super-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#super-方法"}},[a._v("#")]),a._v(" super 方法")]),a._v(" "),s("ul",[s("li",[a._v("构造器要么调用子类构造器，要么调用父类构造器")]),a._v(" "),s("li",[a._v("super 就是调用父类的构造方法，必须要构造方法的第一个")]),a._v(" "),s("li",[a._v("this 代表谁调用就是代表谁，super 代表父类")])]),a._v(" "),s("h4",{attrs:{id:"方法重写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法重写"}},[a._v("#")]),a._v(" 方法重写")]),a._v(" "),s("ul",[s("li",[a._v("需要有继承关系")]),a._v(" "),s("li",[a._v("子类重写父类")]),a._v(" "),s("li",[a._v("修饰符的范围可以扩大但是不能缩小 pubilc>protector>default>praviate")]),a._v(" "),s("li",[a._v("抛出的异常可以缩小但是不能扩大")]),a._v(" "),s("li",[a._v("字类重写方法体不能一样")])]),a._v(" "),s("h4",{attrs:{id:"多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[a._v("#")]),a._v(" 多态")]),a._v(" "),s("ul",[s("li",[a._v("同一个方法对不同对象有不同的行为")]),a._v(" "),s("li",[a._v("一个对象的实际类型是确定的")]),a._v(" "),s("li",[a._v("指向的引用类型的类型是不确定的")]),a._v(" "),s("li",[a._v("对象的方法调用，主要是看左边的方法类型")]),a._v(" "),s("li",[a._v("static 方法不能重写，final 方法不能重写 praviate 方法不能重写")])]),a._v(" "),s("h4",{attrs:{id:"instanceof-方法类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-方法类型转换"}},[a._v("#")]),a._v(" instanceof 方法类型转换")]),a._v(" "),s("ul",[s("li",[a._v("用于引用类型的类型转换")]),a._v(" "),s("li",[a._v("满足父子类型的就是 true")]),a._v(" "),s("li",[a._v("同级的类型不能进行类型转换")]),a._v(" "),s("li",[a._v("类型转换，字类转换成父类，可能会丢失方法")]),a._v(" "),s("li",[a._v("父类指向子类对象，强制转换，强制转换可能会丢失精度")])]),a._v(" "),s("h4",{attrs:{id:"static-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#static-关键字"}},[a._v("#")]),a._v(" static 关键字")]),a._v(" "),s("ul",[s("li",[a._v("静态变量存放再方法区中")]),a._v(" "),s("li",[a._v("静态变量可以通过类名方法")]),a._v(" "),s("li",[a._v("静态方法可以直接通过类调用")])]),a._v(" "),s("h5",{attrs:{id:"抽象类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[a._v("#")]),a._v(" 抽象类")]),a._v(" "),s("ul",[s("li",[a._v("只有类定义，没有内部实现")]),a._v(" "),s("li",[a._v("抽象类的继承子类都必须进行类实现")]),a._v(" "),s("li",[a._v("抽象方法没有方法实现，只有方法定义")]),a._v(" "),s("li",[a._v("抽象类不能 new 只能通过子类区实现")])]),a._v(" "),s("h4",{attrs:{id:"接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[a._v("#")]),a._v(" 接口")]),a._v(" "),s("ul",[s("li",[a._v("接口可以多继承，类只能单继承")]),a._v(" "),s("li",[a._v("接口这是一种约束，定义一种约束类型")]),a._v(" "),s("li",[a._v("interface 是一个接口定义")]),a._v(" "),s("li",[a._v("接口中的方法都是抽象的")]),a._v(" "),s("li",[a._v("接口需要要有一个接口实现类")]),a._v(" "),s("li",[a._v("实现接口后必须重写接口中的所有方法")]),a._v(" "),s("li",[a._v("接口中定义方法")]),a._v(" "),s("li",[a._v("方法都是 puiblic abstract 修饰的")]),a._v(" "),s("li",[a._v("接口可以实现多个")]),a._v(" "),s("li",[a._v("接口中的方法需要重写")]),a._v(" "),s("li",[a._v("implements 关键词实现接口")])]),a._v(" "),s("h4",{attrs:{id:"内部类的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部类的定义"}},[a._v("#")]),a._v(" 内部类的定义")]),a._v(" "),s("ul",[s("li",[a._v("再类的内部定义一个类")]),a._v(" "),s("li",[a._v("内部类可以访问外部类的私有属性和方法")]),a._v(" "),s("li",[a._v("静态内部类")]),a._v(" "),s("li",[a._v("匿名内部类(再实例化时不定义名称，不会再内存中储存)")]),a._v(" "),s("li",[a._v("局部内部类")])]),a._v(" "),s("h4",{attrs:{id:"异常机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常机制"}},[a._v("#")]),a._v(" 异常机制")]),a._v(" "),s("ul",[s("li",[a._v("Exception 异常")]),a._v(" "),s("li",[a._v("检查性异常")]),a._v(" "),s("li",[a._v("运行时异常")]),a._v(" "),s("li",[a._v("错误")]),a._v(" "),s("li",[a._v("Error 和 Exception")]),a._v(" "),s("li",[a._v("Error 和 java 虚拟机错误相关的")]),a._v(" "),s("li",[a._v("Exception 和 Error 是不一样的")])]),a._v(" "),s("h4",{attrs:{id:"try-catch-捕获异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#try-catch-捕获异常"}},[a._v("#")]),a._v(" try catch 捕获异常")]),a._v(" "),s("ul",[s("li",[a._v("需要知道异常的错误")]),a._v(" "),s("li",[a._v("finaly 是最终都会执行的")]),a._v(" "),s("li",[a._v("finaly 可以不要，io 流需要关闭")]),a._v(" "),s("li",[a._v("throw 主动抛出异常，在方法中抛出异常，主要调用抛出异常")]),a._v(" "),s("li",[a._v("throws 需要指明给调用方法的异常，修饰方法")])]),a._v(" "),s("h4",{attrs:{id:"自定义异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义异常"}},[a._v("#")]),a._v(" 自定义异常")]),a._v(" "),s("ul",[s("li",[a._v("需要实现异常类")]),a._v(" "),s("li",[a._v("要使用 finaly 释放资源")])]),a._v(" "),s("h4",{attrs:{id:"运算符的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符的区别"}},[a._v("#")]),a._v(" 运算符的区别")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("| 和 ||，& 和 && 的区别")])]),a._v(" "),s("li",[s("p",[a._v("我们将 || 和 && 定义为逻辑运算符，而 | 和 & 定义为位运算符。")])]),a._v(" "),s("li",[s("p",[a._v("&& 如果两个操作数都非零，则条件为真；")])]),a._v(" "),s("li",[s("p",[a._v("|| 如果两个操作数中有任意一个非零，则条件为真。")])]),a._v(" "),s("li",[s("p",[a._v('& 按位与操作，按二进制位进行"与"运算。运算规则：（有 0 则为 0）')])])]),a._v(" "),s("h4",{attrs:{id:"string-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-类"}},[a._v("#")]),a._v(" String 类")]),a._v(" "),s("ul",[s("li",[a._v("String 类的特点，并不是 Java 基础数据类型")]),a._v(" "),s("li",[a._v("String 类不可变性，操作数量小")]),a._v(" "),s("li",[a._v("StringBuffer 可变长,append(),多线程数据量大，效率低安全")]),a._v(" "),s("li",[a._v("StringBuilder 可变长，单线程数据量大，效率高，不安全")])]),a._v(" "),s("h4",{attrs:{id:"线程同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程同步"}},[a._v("#")]),a._v(" 线程同步")]),a._v(" "),s("h4",{attrs:{id:"线程通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程通信"}},[a._v("#")]),a._v(" 线程通信")]),a._v(" "),s("h4",{attrs:{id:"线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[a._v("#")]),a._v(" 线程池")]),a._v(" "),s("h4",{attrs:{id:"网咯编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网咯编程"}},[a._v("#")]),a._v(" 网咯编程")]),a._v(" "),s("h4",{attrs:{id:"界面编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#界面编程"}},[a._v("#")]),a._v(" 界面编程")]),a._v(" "),s("h4",{attrs:{id:"注解和反射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注解和反射"}},[a._v("#")]),a._v(" 注解和反射")])])}),[],!1,null,null,null);t.default=n.exports}}]);