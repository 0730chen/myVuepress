(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{596:function(a,t,e){"use strict";e.r(t);var s=e(4),v=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h4",{attrs:{id:"http-协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-协议"}},[a._v("#")]),a._v(" HTTP 协议")]),a._v(" "),e("h4",{attrs:{id:"http-缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存"}},[a._v("#")]),a._v(" HTTP 缓存")]),a._v(" "),e("p",[a._v("Web 缓存可以是共享的也可以是私有的，具体取决于其存在的位置。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("浏览器缓存")])]),a._v(" "),e("li",[e("p",[a._v("代理缓存")])]),a._v(" "),e("li",[e("p",[a._v("反向代理缓存")])]),a._v(" "),e("li",[e("p",[a._v("浏览器缓存\n比如访问网页点击回退键时，访问网页的速度比第一次要快很多")])]),a._v(" "),e("li",[e("p",[a._v("代理缓存\n与为单个用户提供服务的浏览器缓存不同，代理缓存可以为访问同一内容的数百个不同用户提供服务。例如，通常由 ISP 或任何其他独立实体在更广泛的级别上实现它们。")])]),a._v(" "),e("li",[e("p",[a._v("反向代理缓存\n反向代理缓存或代理缓存在原始服务器附近实现，以减少服务器上的负载。与由 ISP 等实现以减少网络带宽使用的代理缓存不同，代理或反向代理缓存是由服务器管理员在原始服务器附近实现的，以减少服务器的负载。")])])]),a._v(" "),e("h4",{attrs:{id:"如何去控制缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何去控制缓存"}},[a._v("#")]),a._v(" 如何去控制缓存")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("每当服务器发出一些响应时，它就会附带一些HTTP标头，以指导缓存是否以及如何缓存此响应。内容提供者是必须确保返回正确的HTTP标头以强制缓存如何缓存内容的提供者\n")])])]),e("ul",[e("li",[a._v("设置过期时间：在 HTTP / 1.1 和引入之前 Cache-Control，有 Expires 一个标头，它只是一个时间戳，告诉缓存应将多久的内容视为新鲜内容。此标头的可能值是绝对到期日期；日期必须是格林尼治标准时间 Expires: Mon, 13 Mar 2017 12:22:00 GMT")]),a._v(" "),e("li",[a._v("缓存控制：Cache-Control 指定应将内容缓存多长时间以及以何种方式进行缓存。HTTP / 1.1 中引入了该标头家族，以克服 Expires 标头的限制。cache-control 可以设置为 private 私有的，内容将不会缓存在任何代理中，而只会由客户端（即浏览器）缓存。如果设置为 public，则除了由客户端缓存外，还可以由代理缓存。为许多其他用户提供服务。no-store 指定内容不由任何高速缓存高速缓存。表示可以维护缓存，但是要 ETag 在服务之前从服务器重新验证（例如，使用）缓存的内容。也就是说，仍然有向服务器发出请求，但需要进行验证，而不是下载缓存的内容。max-age 指定内容将被缓存的秒数。s-maxage 这里的 s-前缀代表共享。该指令专门针对共享缓存。就像 max-age 它也得到的秒数为某事进行高速缓存。如果存在，它将覆盖 max-age 和 expires 标头以进行共享缓存。must-revalidate 有时可能会发生以下情况：如果您遇到网络问题，并且无法从服务器检索内容，则浏览器可能会提供未经验证的陈旧内容。must-revalidate 避免这种情况。如果存在此伪指令，则意味着在任何情况下都不能提供过时的内容，并且必须在提供服务之前从服务器重新验证数据。然而，你可以结合不同的方式这些指令来实现不同的缓存行为，no-cache/no-store 并且 public/private 是互斥的。如果同时指定 no-store 和 no-cache，no-store 将优先于 no-cache。")])]),a._v(" "),e("h4",{attrs:{id:"客户端去服务端验证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#客户端去服务端验证"}},[a._v("#")]),a._v(" 客户端去服务端验证")]),a._v(" "),e("ul",[e("li",[a._v('Etag 或“实体标签”是在 HTTP / 1.1 规范中引入的。Etag 只是服务器附加一些资源的唯一标识符。客户端稍后会使用此 ETag 进行有条件的 HTTP 请求声明,ETag: "j82j8232ha7sdh0q2882" - Strong Etag\nETag: W/"j82j8232ha7sdh0q2882" - Weak Etag (prefixed with '),e("code",[a._v("W/")]),a._v(")")]),a._v(" "),e("li",[a._v("强大的ETag验证意味着两个资源完全相同，并且两者之间完全没有区别。尽管ETag弱意味着两个资源虽然不是严格相同，但可以认为是相同的。例如，弱etag可能对动态内容有用。")]),a._v(" "),e("li",[a._v("服务器可能包含Last-Modified标头，该标头指示上次修改某些内容的日期和时间。")])]),a._v(" "),e("h4",{attrs:{id:"缓存建议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存建议"}},[a._v("#")]),a._v(" 缓存建议")]),a._v(" "),e("ul",[e("li",[a._v("您可以对任何静态内容进行积极的缓存")]),a._v(" "),e("li",[a._v("查看并确定您是否甚至需要缓存任何动态内容，如果可以，则应缓存多长时间。例如，对于博客的某些RSS提要，可能需要几个小时的缓存，但是对于ERP中的库存项目则没有任何缓存。")]),a._v(" "),e("li",[a._v("始终在响应中添加验证器（最好是ETag）。")]),a._v(" "),e("li",[a._v("选择缓存内容的可见性（私有或公开）时，请注意。确保您不会在任何公共代理中意外地缓存任何特定于用户的内容或敏感内容。如有疑问，请不要使用缓存。")]),a._v(" "),e("li",[a._v("将经常更改的内容与不经常更改的内容（例如，在javascript捆绑包中）分开，以便在更新时不需要使整个缓存的内容陈旧。")])])])}),[],!1,null,null,null);t.default=v.exports}}]);