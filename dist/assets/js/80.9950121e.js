(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{561:function(e,r,t){"use strict";t.r(r);var o=t(4),s=Object(o.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h4",{attrs:{id:"后端请求与promise理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后端请求与promise理解"}},[e._v("#")]),e._v(" 后端请求与promise理解")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("对于数据库查询函数，将这个数据库方式封装成一个函数，要在外部调用这个函数并且拿到数据库操作的结果（数据库中的数据）")])]),e._v(" "),t("li",[t("p",[e._v("可以使用回调函数 callback，在外部获取想要的结果")])]),e._v(" "),t("li",[t("p",[e._v("可以使用异步 async 操作方法")])]),e._v(" "),t("li",[t("p",[e._v("在外部赋值一个全局变量，然后将 callback 中的值赋值给这个变量，函数外部就可以使用")])]),e._v(" "),t("li",[t("p",[e._v("模板字符串的使用使用 "),t("code",[e._v("${}")]),e._v(" 可以在其中添加变量例如 "),t("code",[e._v("${msg}")])])]),e._v(" "),t("li",[t("p",[e._v("node+express 实现添加评论给后台数据，后台数据库返回数据给前台页面")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("$.ajax({methods:'',url:'',type:'',data:{},dateType:'',success:function(){}发送成功后调用方法，可以接受后台传输回来的数据})")]),e._v(" 前端页面使用 ajax 请求 post 方式发送给后台处理，并储存在数据库中")])]),e._v(" "),t("li",[t("p",[e._v("后台要接受到前端传输过来的数据，并且将数据储存在数据库中，在储存完成过后，要发送一个储存数据的信息表示储存成功了. 对于 post 请求，使用 "),t("code",[e._v("使用router.post('/',function(req,res){ })")]),e._v(" post 请求有两个状态一个是 "),t("code",[e._v("req.on('data',function(chunk){ data += chunk})")]),e._v(" 用来接收从前台传输过来的数据，并且这个数据是二进制数据。不容易阅读, 二是 "),t("code",[e._v("req.on('end',function(){})")]),e._v(" 主要是处理二进制数据使用 "),t("code",[e._v("data = querystring.parse(data)")]),e._v(" 将数据解析成对象，随后将 data 中的文本传入数据库操作函数中，将数据插入数据库中")])]),e._v(" "),t("li",[t("p",[e._v("对于 get 请求，使用 "),t("code",[e._v("router.get('/',function(req.res){})")]),e._v(" get 请求的数据都会附着在 url 中传输给后台，在 get 函数中对 url 进行解析 "),t("code",[e._v("var user = url.parse(req.url, true)")]),e._v(" 将 url 解析成对象，从 url 对象中获取到想要的数值。user 或者 path")])]),e._v(" "),t("li",[t("p",[e._v("get 请求后也可以获取数据库中的数据，并将数据发送给前端页面，使用 "),t("code",[e._v("在获取数据库函数中加入callback函数，在访问成功数据库中的函数后，调用callback函数。function(err,data){if(err){console.log(err)}else{res.send(data)}}")])])]),e._v(" "),t("li",[t("p",[e._v("promise ES6 中的 promise 对象。Promise 是一个容器里面保存结束的事件才会操作的结果，主要是可以进行异步操作")])]),e._v(" "),t("li",[t("p",[e._v("Promise 对象有 3 中状态，pending(进行中), fulfilled(成功了)，rejected(失败了)，只有异步操作的结果可以决定当前是哪一种状态，其他操作都无法。Promise 是一个构造函数，接受两个参数 function(reslove, reject), resolve 代表成功状态，reject 代表失败状态。 "),t("code",[e._v("const promise = new Promsie(function(resolve,reject){if('异步成功'){resolve}else{reject(error)}})")]),e._v(" Promise 实例生成后，可以用 then 方法分别指定 resolve 和 reject 的状态的回调函数，then 可以接受两个函数作为回调函数，分别指定 resolve 的与 reject 的回调函数")])])])])}),[],!1,null,null,null);r.default=s.exports}}]);